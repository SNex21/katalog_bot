from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from crud import check_user, create_user, get_dev_by_title_and_params, get_all_users, get_user_by_telid
from keyboards import *
import os 
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker
from db import engine
import logging
from aiogram import F
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramForbiddenError


load_dotenv()
logging.basicConfig(level=logging.INFO)


bot = Bot(os.getenv('TOKEN_API'))
dp = Dispatcher(bot=bot)
session = sessionmaker(bind=engine)
s = session()


class MessageState(StatesGroup):
    text_message = State()


@dp.message(CommandStart()) # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
async def cmd_start(ms: types.Message):

    if not(check_user(s, ms.from_user.id)):
        create_user(s, {'telid': ms.from_user.id, 'username':ms.from_user.username})

    telid = ms.from_user.id
    await ms.answer('üëã–ü—Ä–∏–≤–µ—Ç!\n\nü§ñ<b>–≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥</b>, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å —Å–∞–º—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ:\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω—ã\n\nüíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã\n\nü§© –ò –¥—Ä—É–≥–∏–µ –¥–µ–≤–∞–π—Å—ã\n\n<b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:</b>', parse_mode=ParseMode.HTML, reply_markup=gen_start_kb(telid))
    

@dp.callback_query(F.data == 'start')
async def fisrt_handler(callback: types.CallbackQuery):
    await callback.message.edit_text('üëã–ü—Ä–∏–≤–µ—Ç!\n\nü§ñ<b>–≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥</b>, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å —Å–∞–º—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ:\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω—ã\n\nüíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã\n\nü§© –ò –¥—Ä—É–≥–∏–µ –¥–µ–≤–∞–π—Å—ã\n\n<b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:</b>', parse_mode=ParseMode.HTML, reply_markup=gen_start_kb(telid))


@dp.callback_query(lambda call: 'first_' in call.data)
async def fisrt_handler(callback: types.CallbackQuery):
    typ = callback.data.replace('first_', '')
    await callback.message.edit_text(f'üîé –í—ã–±–µ—Ä–µ—Ç–µ –±—Ä–µ–Ω–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: \n\n<b>{typ}</b>', parse_mode=ParseMode.HTML, reply_markup=gen_companyies_kb(typ))


@dp.callback_query(lambda call: 'second_' in call.data)
async def second_handler(callback: types.CallbackQuery):
    cb = callback.data.replace('second_', '').split('_')
    await callback.message.edit_text(f'üîé –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:', parse_mode=ParseMode.HTML, reply_markup=gen_devices_kb(cb[1], cb[0], callback.data))


@dp.callback_query(lambda call: 'devs_' in call.data)
async def second_handler(callback: types.CallbackQuery):
    dev = callback.data.replace('devs_', '')
    await callback.message.edit_text(f'üîé –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n{dev}', parse_mode=ParseMode.HTML, reply_markup=gen_devices_param_kb(dev, callback.data))


@dp.callback_query(lambda call: 'params' in call.data)
async def last_handler(callback: types.CallbackQuery):
    dev = callback.data.replace('params_', '').split('#')
    title = dev[0]
    params = dev[1]
    dev = get_dev_by_title_and_params(s, title, params)
    await callback.message.edit_text(f'<b>{title} {params}</b>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {dev.price} —Ä—É–±\n\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ @P1g3on', parse_mode=ParseMode.HTML, reply_markup=gen_last_kb(title))


# admin-–ø–∞–Ω–µ–ª—å
    

@dp.callback_query(lambda call: 'admin' in call.data)
async def second_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(f'–≠—Ç–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', parse_mode=ParseMode.HTML, reply_markup=gen_admin_keyboard())


@dp.callback_query(F.data=='make_spam')
async def make_spam_1(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MessageState.text_message)
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n –í–ù–ò–ú–ê–ù–ò–ï –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –ù–ï–õ–¨–ó–Ø –ò–ó–ú–ï–ù–ò–¢–¨')


@dp.message(MessageState.text_message)
async def make_spam_4(message: types.Message, state: FSMContext):
    if message.content_type != 'photo':
        users = get_all_users(s)
        blocked_users = 0
        active_users = 0
        for i in users:
                try:
                    await bot.send_message(chat_id=i['telid'], text=message.caption)
                    active_users += 1
                except TelegramForbiddenError:
                    blocked_users += 1
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n\n'+'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: ' + str(blocked_users) +'\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: ' + str(active_users))

    else:
        users = get_all_users(s)
        blocked_users = 0
        active_users = 0
        for i in users:
                try:
                    await bot.send_photo(chat_id=i['telid'], photo=message.photo[-1].file_id, caption=message.caption)
                    active_users += 1
                except TelegramForbiddenError:
                    blocked_users += 1
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n\n'+'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: ' + str(blocked_users) +'\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: ' + str(active_users))


if __name__=='__main__':
    dp.run_polling(bot)

